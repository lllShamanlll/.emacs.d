* Package management
** Package repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
;;(add-to-list 'package-archives '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)
#+END_SRC

** Install "use-package"
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (setq use-package-always-ensure t)
  (require 'use-package))
#+END_SRC

* Configuration
** Turn on show-paren-mode
   #+BEGIN_SRC emacs-lisp
;;(use-package  hl-sexp)
;;(show-paren-mode 1)
;;(setq show-paren-style 'mixed)
(use-package highlight)
;;(hl-sexp-mode t)
;;  :config
;;  (define-globalized-minor-mode global-highlight-highlight-sexps-mode highlight-highlight-sexps-mode
;;    (lambda nil (highlight-highlight-sexps-mode t)))
;;  (global-highlight-highlight-sexps-mode t))
#+END_SRC

** Turn on global-auto-revert-mode
   #+BEGIN_SRC emacs-lisp
(global-auto-revert-mode)
   #+END_SRC

** Turn off lockfiles
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

** Set backup & autosave locations
   #+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . "~/.emacs.d/temp/backups")))
(setq auto-save-file-name-transforms
      `((".*" "~/.emacs.d/temp/autosaves" t)))
#+END_SRC
** Save places
#+BEGIN_SRC emacs-lisp
(setq-default save-place t)
(setq save-place-file "~/.emacs.d/temp/saved-places")
#+END_SRC

** config whitespace-mode
   #+BEGIN_SRC emacs-lisp
(setq whitespace-style '(lines))
(setq whitespace-line-column 80)
(setq-default whitespace-style
              '(face
                tabs spaces newline trailing space-before-tab space-after-tab
                space-mark tab-mark lines-tail))
(add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC
** Cursor
#+BEGIN_SRC emacs-lisp
(setq-default
  cursor-type 'bar
  cursor-in-non-selected-windows nil) 
#+END_SRC

** Show line numbers
   #+BEGIN_SRC emacs-lisp
(use-package nlinum
  :config
  (set-face-attribute 'linum nil 
    :background (face-attribute 'default :background))
  (add-hook 'text-mode-hook '(lambda () (nlinum-mode t)))
  (add-hook 'prog-mode-hook '(lambda () (nlinum-mode t)))
  (setq nlinum-format " %d "))
#+END_SRC

** Install "powerline"
#+BEGIN_SRC emacs-lisp
;;(use-package powerline :ensure t
;;  :init (setq powerline-default-separator 'arrow)
;;  :config (progn
;;            (require 'powerline)
;;            (add-hook 'desktop-after-read-hook 'powerline-reset)
;;            (defface modes-ml-face '((t (:background "#002b36" :inherit mode-line)))
;;              "Powerline face for modes section of the mode-line"
;;              :group 'powerline)
;;            (defface file-ml-face '((t (:background "#586e75" :inherit mode-line)))
;;              "Powerline face for file and branch section of the mode-line"
;;              :group 'powerline)
;;            (defface line-ml-face '((t (:background "#93a1a1" :inherit mode-line)))
;;              "Powerline face for line number section of the mode-line"
;;              :group 'powerline)
;;            (defface pos-ml-face '((t (:background "#586e75" :inherit mode-line)))
;;              "Powerline face for file position section of the mode-line"
;;              :group 'powerline)
;;            (defface ml-fill-face '((t (:background "#93a1a1" :inherit mode-line)))
;;              "Powerline face used to fill the unused portion of the mode-line"
;;              :group 'powerline)
;;            (setq-default mode-line-format
;;                          '("%e"
;;                            (:eval
;;                             (let* ((file-name (buffer-file-name (current-buffer)))
;;                                    (active (powerline-selected-window-active))
;;                                    (separator-left (intern (format "powerline-%s-%s"
;;                                                                    (powerline-current-separator)
;;                                                                    (car powerline-default-separator-dir))))
;;                                    (separator-right (intern (format "powerline-%s-%s"
;;                                                                     (powerline-current-separator)
;;                                                                     (cdr powerline-default-separator-dir))))
;;                                    (lhs (list (powerline-major-mode 'modes-ml-face 'l)
;;                                               (powerline-process 'modes-ml-face 'l)
;;                                               (powerline-minor-modes 'modes-ml-face 'l)
;;                                               (powerline-raw " " 'modes-ml-face)
;;                                               (funcall separator-left 'modes-ml-face 'file-ml-face)
;;
;;                                               (powerline-raw "[" 'file-ml-face)
;;                                               (powerline-raw (projectile-project-name) 'file-ml-face)
;;                                               (powerline-raw "] %b %*" 'file-ml-face)
;;                                               (powerline-raw (concat " "
;;                                                                      (when (and file-name vc-mode)
;;                                                                        (concat "(" (-> file-name
;;                                                                                        vc-working-revision
;;                                                                                        (string-utils-truncate-to 40))
;;                                                                                ")")))
;;                                                              'file-ml-face 'r)
;;                                               (funcall separator-left 'file-ml-face 'ml-fill-face)))
;;
;;                                    (rhs (list (powerline-raw global-mode-string 'ml-fill-face 'r)
;;                                               (funcall separator-right 'ml-fill-face 'pos-ml-face)
;;                                               (powerline-raw "%p " 'pos-ml-face 'l)
;;                                               (funcall separator-right 'pos-ml-face 'line-ml-face)
;;
;;                                               (powerline-raw " %4l " 'line-ml-face 'r))))
;;
;;                               (concat (powerline-render lhs)
;;                                       (powerline-fill 'ml-fill-face (powerline-width rhs))
;;                                       (powerline-render rhs))))))))
  (use-package smart-mode-line
    :init (progn
            (setq sml/theme 'respectful
                  sml/no-confirm-load-theme t)
            (sml/setup)))

#+END_SRC

** Global key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-?") 'help-command)
  (global-set-key (kbd "M-?") 'mark-paragraph)
  (global-set-key (kbd "C-h") 'delete-backward-char)
  (global-set-key (kbd "M-h") 'backward-kill-word)
#+END_SRC
** Set line width to 80
I'm used to using lines of 80 characters
#+BEGIN_SRC emacs-lisp
(setq fill-column 80)
#+END_SRC
** Python CodingStyle
   #+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
      (lambda ()
        (setq tab-width 4)
        (setq python-indent 4)))
   #+END_SRC
** Scratch
   #+BEGIN_SRC emacs-lisp
(use-package scratch)
   #+END_SRC
** Ediff
   #+BEGIN_SRC emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
** clang-format
#+BEGIN_SRC emacs-lisp
(use-package clang-format)
#+END_SRC
The issue comes from the fact Emacs using undecided-unix by default for sending data to a subprocess.
https://llvm.org/bugs/show_bug.cgi?id=31092 should fix an issue.
#+BEGIN_SRC emacs-lisp
(setq default-process-coding-system '(undecided-dos . undecided-dos))
#+END_SRC
* Essensials
** zoom-window
#+BEGIN_SRC emacs-lisp
(use-package zoom-window
  :config
  (global-set-key (kbd "C-x C-z") 'zoom-window-zoom)
  (custom-set-variables
   '(zoom-window-mode-line-color "DarkGreen")))
#+END_SRC
** origami
#+BEGIN_SRC emacs-lisp

(use-package origami)

#+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height 90
                    :weight 'normal
                    :width 'normal)
#+END_SRC

** Turn off tooltip bar
   #+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
#+END_SRC

** Turn off tool bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

** Turn off menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

** Turn off scroll bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

** Turn off electic-indent-mode
#+BEGIN_SRC emacs-lisp
(electric-indent-mode -1)
#+END_SRC

** Turn on column-number-mode
   #+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

** Turn off tabs
   #+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+END_SRC

** Highlight current line
   #+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

** ORG - Highlight syntax in code blocks
   #+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

** Remove fringes
#+BEGIN_SRC emacs-lisp
(set-fringe-mode 0)
#+END_SRC

** Solarized
   #+BEGIN_SRC emacs-lisp
(setq color-themes '())
(use-package color-theme-solarized
  :config
  (customize-set-variable 'frame-background-mode 'dark)
  (setq solarized-broken-srgb t)
;;  (setq solarized-high-contrast-mode-line nil)
  (load-theme 'solarized t))
#+END_SRC
    
** ORG - Bullets
   #+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Helm
   #+BEGIN_SRC emacs-lisp
    (defun lllshamanlll/helm-include-file (file)
      (insert (format "#include \"%s\"" file)))

    (use-package ag)
    (use-package helm
      :diminish helm-mode
      :init
      (require 'helm-config)
      (setq helm-candidate-number-limit           100
            helm-idle-delay                       0.0
            helm-input-idle-delay                 0.01
            helm-yas-display-key-on-candidate     t
            helm-quick-update                     t
            helm-always-two-windows               nil
            helm-split-window-default-side        'other
            helm-split-window-in-side-p           t
            helm-M-x-requires-pattern             nil
            helm-ff-skip-boring-files             t
            helm-M-x-fuzzy-match                  t
            helm-bookmark-show-location           t
            helm-buffers-fuzzy-matching           t
            helm-completion-in-region-fuzzy-match t
            helm-file-cache-fuzzy-match           t
            helm-imenu-fuzzy-match                t
            helm-mode-fuzzy-match                 t
            helm-locate-fuzzy-match               t 
            helm-recentf-fuzzy-match              t
            helm-semantic-fuzzy-match             t)
      (helm-mode)
      (add-to-list 'helm-find-files-actions
                   '("Insert include directive at cursor position." .
                     lllshamanlll/helm-include-file) t)
      :config
      ;; Minimize helm buffer header
      (defun helm-toggle-header-line ()
        (if (= (length helm-sources) 1)
            (set-face-attribute 'helm-source-header nil :height 0.1)
            (set-face-attribute 'helm-source-header nil :height 1.0)))
      (add-hook 'helm-before-initialize-hook 'helm-toggle-header-line)

      (add-to-list 'display-buffer-alist
                          `(,(rx bos "*helm" (* not-newline) "*" eos)
                               (display-buffer-in-side-window)
                               (inhibit-same-window . t)
                               (window-height . 0.4)))

      :bind (("C-x C-f"   . helm-find-files)
             ("C-c h"     . helm-mini)
             ("C-x C-b"   . helm-buffers-list)
             ("C-x b"     . helm-buffers-list)
             ("M-y"       . helm-show-kill-ring)
             ("M-x"       . helm-M-x)
             ("C-x c o"   . helm-occur)
             ("C-x c s"   . helm-swoop)
             ("C-x c SPC" . helm-all-mark-rings)))
    (use-package helm-swoop
      :after helm)
    (use-package helm-ag
      :after helm ag)
    (use-package helm-projectile
      :after helm projectile
      :config
      (helm-projectile-on)
      :init
      (global-set-key (kbd "C-c p p") 'helm-projectile-switch-project))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
(setq projectile-globally-ignored-directories
      (append '(
        ".git"
        ".svn")
          projectile-globally-ignored-directories))

(setq projectile-globally-ignored-file-suffixes
      (append '(
        ".pyc"
        ".obj"
        ".xls"
        ".xlsx"
        ".doc"
        ".docx"
        ".rc")
          projectile-globally-ignored-file-suffixes))

(setq projectile-globally-ignored-files
      (append '(
        ".gitattributes"
        ".gitmodules"
        ".gitignore" )
          projectile-globally-ignored-files))

(projectile-global-mode t))
#+END_SRC

** Multiple cursors
   #+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config
  (setq mc/always-run-for-all t)
  ;; This is globally useful, so it goes under `C-x', and `m'
  ;; for "multiple-cursors" is easy to remember.
  (define-key ctl-x-map "\C-m" #'mc/mark-all-dwim)
  ;; Usually, both `C-x C-m' and `C-x RET' invoke the
  ;; `mule-keymap', but that's a waste of keys. Here we put it
  ;; _just_ under `C-x RET'.
  (define-key ctl-x-map (kbd "<return>") mule-keymap)
  
  ;; Remember `er/expand-region' is bound to M-2!
  (global-set-key (kbd "M-3") #'mc/mark-next-like-this)
  (global-set-key (kbd "M-4") #'mc/mark-previous-like-this)
  (define-prefix-command 'endless/mc-map)
  ;; C-x m is usually `compose-mail'. Bind it to something
  ;; else if you use this command.
  (define-key ctl-x-map "m" 'endless/mc-map)
  
  ;;; Really really nice!
  (define-key endless/mc-map "i" #'mc/insert-numbers)
  (define-key endless/mc-map "h" #'mc-hide-unmatched-lines-mode)
  (define-key endless/mc-map "a" #'mc/mark-all-like-this)
  
  ;;; Occasionally useful
  (define-key endless/mc-map "d" #'mc/mark-all-symbols-like-this-in-defun)
  (define-key endless/mc-map "r" #'mc/reverse-regions)
  (define-key endless/mc-map "s" #'mc/sort-regions)
  (define-key endless/mc-map "l" #'mc/edit-lines)
  (define-key endless/mc-map "\C-a" #'mc/edit-beginnings-of-lines)
  (define-key endless/mc-map "\C-e" #'mc/edit-ends-of-lines))
#+END_SRC

** Expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :config
  (global-set-key (kbd "M-2") #'er/expand-region))
#+END_SRC

** multi-term
#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :config
  (setq multi-term-program "/bin/zsh")
  (setq system-uses-terminfo nil)
  (add-hook 'term-mode-hook
          (lambda ()
            (setq-local truncate-lines nil)
            (add-to-list 'term-bind-key-alist '("C-f" . forward-char))
            (add-to-list 'term-bind-key-alist '("C-b" . backward-char))
            (add-to-list 'term-bind-key-alist '("M-f" . forward-word))
            (add-to-list 'term-bind-key-alist '("M-b" . backward-word))
            (setq-local global-hl-line-mode nil)
            (setq-local show-trailing-whitespace nil)
            (setq-local term-buffer-maximum-size 10000))))
#+END_SRC

** switch-window
#+BEGIN_SRC emacs-lisp
(use-package switch-window
      :bind (("C-x o"   . switch-window)))
#+END_SRC
** dash
#+BEGIN_SRC emacs-lisp
(use-package dash)
#+END_SRC

** undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config
  (global-undo-tree-mode 1))
#+END_SRC

** shift-number
Sometimes it's usefull to increase/decrease multiple numbers at the same time. Then select those numbers with multiple cursors & user shfit-number.
#+BEGIN_SRC emacs-lisp
(use-package shift-number)
#+END_SRC
** Trun on delete-selection-mode
Make inserting text while the mark is active causes the selected text to be deleted first.
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
** kill-buffer -> kill-this-buffer
   By default C-x k runs the command kill-buffer which prompts you for which buffer you want to kill, defaulting to the current active buffer. I don’t know about you, but I rarely want to kill a different buffer than the one I am looking at, so I rebind C-x k to kill-this-buffer which just kills the current buffer without prompting (unless there are unsaved changes).
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC

** Yes or no
   #+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Give it a try
** Autoupdate packages
   #+BEGIN_SRC emacs-lisp
(use-package auto-package-update)
#+END_SRC

** centred-cursor-mode
#+BEGIN_SRC emacs-lisp
(use-package centered-cursor-mode)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc -s"))
#+END_SRC

** symon
#+BEGIN_SRC emacs-lisp
(use-package symon
  :config
  (symon-mode)
  (setq symon-refresh-rate 4)
  (setq symon-delay 1))
#+END_SRC

** sublimity
#+BEGIN_SRC emacs-lisp
(require 'sublimity)
(require 'sublimity-scroll)
;;(require 'sublimity-map) ;; experimental
;; (use-package 'sublimity-attractive)
(sublimity-mode 1)
#+END_SRC

* Removal candidates
Try to live without that before removal
** Turn on visual-line-mode
#+BEGIN_SRC emacs-lisp
;;(global-visual-line-mode t)
#+END_SRC

** Revert all buffers
   #+BEGIN_SRC emacs-lisp
;;(defun revert-all-buffers ()
;;  "Refreshes all open buffers from their respective files."
;;  (interactive)
;;  (dolist (buf (buffer-list))
;;    (with-current-buffer buf
;;      (when (and (buffer-file-name) (file-exists-p (buffer-file-name)) (not (buffer-modified-p)))
;;        (revert-buffer t t t) )))
;;  (message "Refreshed open files.") )
#+END_SRC

** Slime
#+BEGIN_SRC emacs-lisp
;;(use-package slime
;;  :config
;;  (slime-setup)
;;  (setq inferior-lisp-program "sbcl"))
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
;;(use-package rust-mode)
#+END_SRC

** Autocomplete
Install company mode. Enable it globaly. Add hook to enable autocompletion of ogr-mode keywords.
#+BEGIN_SRC emacs-lisp
;;(use-package company
;;  :after dash
;;  :diminish company-mode
;;  :init (global-company-mode 1)
;;  :config)
;;
;;(use-package company-c-headers
;;  :after company
;;  :config
;;  (add-to-list 'company-backends 'company-c-headers))
;;(use-package company-jedi
;;  :after company)
#+END_SRC
** Turn on desktop-save-mode
   Automatically save/restore buffers list between emacs sessions
   #+BEGIN_SRC emacs-lisp
;;(setq desktop-dirname             "~/.emacs.d/desktop/"
;;      desktop-base-file-name      "emacs.desktop"
;;      desktop-base-lock-name      "lock"
;;      desktop-path                (list desktop-dirname)
;;      desktop-save                t
;;;      desktop-files-not-to-save   "^$" ;reload tramp paths
;;      desktop-load-locked-desktop nil)
;;(desktop-save-mode 1)
#+END_SRC

** eyebrows
#+BEGIN_SRC emacs-lisp
;;(use-package eyebrowse)
#+END_SRC
** Smoth-scroll
#+BEGIN_SRC emacs-lisp
;;(use-package smooth-scroll
;;  :diminish smooth-scroll-mode
;;  :config
;;  (smooth-scroll-mode 1)
;;  (setq smooth-scroll/vscroll-step-size 5))
#+END_SRC
