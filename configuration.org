* Package management
** Package repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)
#+END_SRC

** Install "use-package"
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (setq use-package-always-ensure t)
  (require 'use-package))
#+END_SRC

* Configuration
** Font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height 90
                    :weight 'normal
                    :width 'normal)
#+END_SRC

** Builtin components
*** Turn off tooltip bar
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
#+END_SRC

*** Turn off tool bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

*** Turn off menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

*** Turn off scroll bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

*** Turn off electic-indent-mode
#+BEGIN_SRC emacs-lisp
(electric-indent-mode -1)
#+END_SRC

*** Turn on show-paren-mode
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

*** Turn on column-number-mode
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

*** Turn on desktop-save-mode
Automatically save/restore buffers list between emacs sessions
#+BEGIN_SRC emacs-lisp
(setq desktop-dirname             "~/.emacs.d/desktop/"
      desktop-base-file-name      "emacs.desktop"
      desktop-base-lock-name      "lock"
      desktop-path                (list desktop-dirname)
      desktop-save                t
;      desktop-files-not-to-save   "^$" ;reload tramp paths
      desktop-load-locked-desktop nil)
(desktop-save-mode 1)
#+END_SRC

*** Turn on visual-line-mode
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

*** Trun of delete-selection-mode
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

*** Turn on global-auto-revert-mode
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

*** Set backup & autosave locations
#+BEGIN_SRC emacs-lisp
;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,(concat user-emacs-directory
                         (convert-standard-filename "backups/")))))
(setq auto-save-file-name-transforms
      `((".*" ,(concat user-emacs-directory
                       (convert-standard-filename "autosaves/")))))
#+END_SRC

*** Remove fringes
#+BEGIN_SRC emacs-lisp
(set-fringe-mode 0)
#+END_SRC

*** Highlight current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

*** Highlight syntax in code blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

*** config whitespace-mode
#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(lines))
(setq whitespace-line-column 80)
(setq-default whitespace-style
              '(face
                tabs spaces newline trailing space-before-tab space-after-tab
                space-mark tab-mark lines-tail))
(add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC
** Cursor
#+BEGIN_SRC emacs-lisp
(setq-default
  cursor-type 'bar
  cursor-in-non-selected-windows nil) 
#+END_SRC

** Themes
*** Solarized
#+BEGIN_SRC emacs-lisp
(setq color-themes '())
(use-package color-theme-solarized
  :config
  (customize-set-variable 'frame-background-mode 'dark)
  (setq solarized-broken-srgb t)
;;  (setq solarized-high-contrast-mode-line nil)
  (load-theme 'solarized t))
#+END_SRC
    
** Show line numbers
*** TODO Hilight current line number
*** TODO Integration with whitespace-mode
*** Show line numbers
#+BEGIN_SRC emacs-lisp
(use-package nlinum
  :config
  (set-face-attribute 'linum nil 
    :background (face-attribute 'default :background))
  (add-hook 'text-mode-hook '(lambda () (nlinum-mode t)))
  (add-hook 'prog-mode-hook '(lambda () (nlinum-mode t)))
  (setq nlinum-format " %d "))
#+END_SRC

** Mode-line
*** Install "smart-mode-line"
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :init (progn
            (setq sml/theme 'respectful
                  sml/no-confirm-load-theme t)
            (sml/setup)))
#+END_SRC

*** TODO Show window numbers

** Org-mode
*** Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** Helm - interactive completion
#+BEGIN_SRC emacs-lisp
  (use-package ag)
  (use-package helm
    :diminish helm-mode
    :init
    (require 'helm-config)
    (setq helm-candidate-number-limit           100
          helm-idle-delay                       0.0
          helm-input-idle-delay                 0.01
          helm-yas-display-key-on-candidate     t
          helm-quick-update                     t
          helm-always-two-windows               t
          helm-split-window-default-side        'right
          helm-M-x-requires-pattern             nil
          helm-ff-skip-boring-files             t
          helm-M-x-fuzzy-match                  t
          helm-bookmark-show-location           t
          helm-buffers-fuzzy-matching           t
          helm-completion-in-region-fuzzy-match t
          helm-file-cache-fuzzy-match           t
          helm-imenu-fuzzy-match                t
          helm-mode-fuzzy-match                 t
          helm-locate-fuzzy-match               t 
          helm-quick-update                     t
          helm-recentf-fuzzy-match              t
          helm-semantic-fuzzy-match             t)
    (helm-mode)
    :config
;;    ;; Minimize helm buffer header
;;    (defun helm-toggle-header-line ()
;;      (if (= (length helm-sources) 1)
;;          (set-face-attribute 'helm-source-header nil :height 0.1)
;;          (set-face-attribute 'helm-source-header nil :height 1.0)))
;;    (add-hook 'helm-before-initialize-hook 'helm-toggle-header-line)

    :bind (("C-x C-f"   . helm-find-files)
           ("C-c h"     . helm-mini)
           ("C-x C-b"   . helm-buffers-list)
           ("C-x b"     . helm-buffers-list)
           ("M-y"       . helm-show-kill-ring)
           ("M-x"       . helm-M-x)
           ("C-x c o"   . helm-occur)
           ("C-x c s"   . helm-swoop)
           ("C-x c SPC" . helm-all-mark-rings)))
  (use-package helm-swoop
    :after helm)
  (use-package helm-ag
    :after helm ag)
  (use-package helm-projectile
    :after helm projectile
    :config
    (helm-projectile-on))
#+END_SRC
** Scroll
*** Smoth-scroll
#+BEGIN_SRC emacs-lisp
(use-package smooth-scroll
  :diminish smooth-scroll-mode
  :config
  (smooth-scroll-mode 1)
  (setq smooth-scroll/vscroll-step-size 5))
#+END_SRC
** Project management
*** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-global-mode t))
#+END_SRC

** Autocomplete
Install company mode. Enable it globaly. Add hook to enable autocompletion of ogr-mode keywords.
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :init (global-company-mode 1))
;  :commands (company-complete company-mode))
(use-package company-c-headers
  :after company)
(use-package company-jedi
  :after company)
#+END_SRC

** Multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config
  ;; This is globally useful, so it goes under `C-x', and `m'
  ;; for "multiple-cursors" is easy to remember.
  (define-key ctl-x-map "\C-m" #'mc/mark-all-dwim)
  ;; Usually, both `C-x C-m' and `C-x RET' invoke the
  ;; `mule-keymap', but that's a waste of keys. Here we put it
  ;; _just_ under `C-x RET'.
  (define-key ctl-x-map (kbd "<return>") mule-keymap)
  
  ;; Remember `er/expand-region' is bound to M-2!
  (global-set-key (kbd "M-3") #'mc/mark-next-like-this)
  (global-set-key (kbd "M-4") #'mc/mark-previous-like-this)
  (define-prefix-command 'endless/mc-map)
  ;; C-x m is usually `compose-mail'. Bind it to something
  ;; else if you use this command.
  (define-key ctl-x-map "m" 'endless/mc-map)
  
  ;;; Really really nice!
  (define-key endless/mc-map "i" #'mc/insert-numbers)
  (define-key endless/mc-map "h" #'mc-hide-unmatched-lines-mode)
  (define-key endless/mc-map "a" #'mc/mark-all-like-this)
  
  ;;; Occasionally useful
  (define-key endless/mc-map "d" #'mc/mark-all-symbols-like-this-in-defun)
  (define-key endless/mc-map "r" #'mc/reverse-regions)
  (define-key endless/mc-map "s" #'mc/sort-regions)
  (define-key endless/mc-map "l" #'mc/edit-lines)
  (define-key endless/mc-map "\C-a" #'mc/edit-beginnings-of-lines)
  (define-key endless/mc-map "\C-e" #'mc/edit-ends-of-lines))
#+END_SRC

** Expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :config
  (global-set-key (kbd "M-2") #'er/expand-region))
#+END_SRC
** Bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-?") 'help-command)
  (global-set-key (kbd "M-?") 'mark-paragraph)
  (global-set-key (kbd "C-h") 'delete-backward-char)
  (global-set-key (kbd "M-h") 'backward-kill-word)
#+END_SRC
** Autoupdate packages
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :config
  (auto-package-update-maybe))
#+END_SRC
** Languages settings
*** Python
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
      (lambda ()
        (setq indent-tabs-mode nil)
        (setq tab-width 4)
        (setq python-indent 4)))
#+END_SRC
** Slime
#+BEGIN_SRC emacs-lisp
(use-package slime
  :config
  (slime-setup)
  (setq inferior-lisp-program "sbcl"))
#+END_SRC
** Layout restore
#+BEGIN_SRC emacs-lisp
(use-package layout-restore)
#+END_SRC
